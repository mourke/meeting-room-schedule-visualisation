{"version":3,"sources":["models/Event.ts","API.ts","images/icons/Active indicator.svg","views/SidebarSplitViewController.tsx","views/LoginView.tsx","images/icons/Book.svg","images/icons/Camera.svg","images/icons/Group.svg","images/icons/Present.svg","views/MeetingsOverviewView.tsx","images/icons/Right Chevron.svg","views/CalendarView.tsx","views/SettingsView.tsx","images/icons/Calendar.svg","images/icons/Settings.svg","App.tsx","reportWebVitals.ts","index.tsx"],"names":["EventType","SidebarSplitViewController","props","state","index","this","pages","className","src","activeIndicator","alt","setState","map","value","activityIndicatorForIndex","onClick","changeTab","style","opacity","icon","detail","undefined","currentPage","detailView","Col","xs","Container","fluid","height","Row","sidebar","padding","display","flexDirection","mainView","React","Component","client","a","assert","api","get","calendars","rooms","push","name","id","calendar","startDate","endDate","testImageURL","URL","today","Date","dateString","toDateString","eightThirty","setHours","twelve","oneThirty","three","overview","time","duration","category","conference","attendees","image","email","birthday","call","catchup","startDateTime","getFullYear","getMonth","getDay","endDateTime","meetings","hasOwnProperty","date","location","description","getTime","getHours","getMinutes","getSeconds","meetingAttendees","attendee","emailAddress","address","type","event","subject","body","contentType","content","categories","start","dateTime","timeZone","end","post","response","API","MeetingsOverviewView","loading","error","empty","getMeetings","dateRange","result","Object","keys","length","emptyView","message","title","Group","Present","Camera","Book","entries","Fragment","toLocaleDateString","weekday","month","day","meeting","backgroundColor","meetingStringFromMeeting","imageForMeetingCategory","filter","cssFilterForMeetingCategory","flatMap","person","toString","loadingView","errorView","listView","options","hour12","hour","minute","toLocaleTimeString","CalendarView","DAYS_IN_A_WEEK","HOURS_IN_A_DAY","CELL_HEIGHT","currentWeek","now","nextWeek","bind","previousWeek","setInterval","loadFromAPI","prevProps","prevState","snapshot","firstDay","firstDayOfWeek","lastDay","setDate","getDate","startOfWeek","toLocaleString","lastWeek","lhs","rhs","offset","meetingTimeToYOffset","top","marginTop","paddingLeft","borderBottom","RightChevron","weekString","Array","dayName","isCurrentDay","datesAreSameDay","noGutters","flex","marginLeft","column","currentDay","row","meetingDurationToHeight","currentTimeIndicator","SettingsView","App","mainPage","settingsPage","settings","Fab","color","aria-label","Add","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9a991dc1.chunk.js","sourcesContent":["import {Person} from './Person'\n\nexport enum EventType {\n    call = `#0085e3`,\n    birthday = `#ff623b`,\n    catchup = `#00a89d`,\n    conference = `#b891ff`\n}\n\nexport type Event = {\n    name: string\n    overview: string\n    category: EventType\n    time: Date\n    duration: number // in minutes\n    attendees: Person[]\n}\n\n","import { Client } from '@microsoft/microsoft-graph-client';\nimport { strict as assert } from 'assert';\nimport {Room} from './models/Room'\nimport {Person} from './models/Person'\nimport {Event as Meeting, Event, EventType} from './models/Event'\n\n\nexport module API {\n    let client: Client\n\n    /*\n    * description: fetches the list of calendar names and their IDs\n    * input: -\n    * output: array of the Room type\n    * */\n    export async function getListOfCalendarNamesAndIDs():Promise<Room[]> {\n        assert(client, \"Client must be initialised to call API methods.\");\n        const calendars = await client.api(\"/me/calendars\").get()\n        const rooms:Room[] = []\n        for (const value of calendars.value) {\n            rooms.push({name: value.name, id: value.id})\n        }\n        return rooms\n    }\n\n    /*\n     * description: fetches the calendar with the specified ID or name\n     * input: id OR name of calendar in string form\n     * output: Calendar object if fetch successful\n     *         Undefined if fetch not successful (no corresponding ID or name)\n     * */\n    export async function getCalendar(id:string):Promise<object|undefined> {\n        assert(client, \"Client must be initialised to call API methods.\");\n        const calendar = await client.api(`/me/calendars/${id}`).get()\n        if (calendar.id === id) {\n            return calendar\n        }\n        return undefined\n    }\n\n    /*\n    * description: fetches the meetings for a calender with a certain ID or name within a specified date range in a sorted manner\n    * input: id OR name of calendar in string form\n    *        startDate typescript Date object\n    *        endDate typescript Date object\n    * output: dictionary with dates and keys and arrays of meeting objects as values (first element = most recent)\n    *         undefined if fetch not successful\n    * */\n    export async function getMeetings(id: string, startDate: Date, endDate: Date): Promise<Record<string, Meeting[]> | undefined> {\n        const testImageURL = new URL(\"https://upload.wikimedia.org/wikipedia/commons/7/7c/Profile_avatar_placeholder_large.png\")\n        const today = new Date()\n        const dateString = today.toDateString()\n        const eightThirty = new Date(today)\n        eightThirty.setHours(8, 30)\n        const twelve = new Date(today)\n        twelve.setHours(12, 0)\n        const oneThirty = new Date(today)\n        oneThirty.setHours(13, 30)\n        const three = new Date(today)\n        three.setHours(15, 6)\n        return {\n            [dateString]: [{\n                name: \"Kickoff Meeting\",\n                overview: \"Sample meeting overview.\",\n                time: eightThirty,\n                duration: 170,\n                category: EventType.conference,\n                attendees: [\n                    {name: \"John\", image: testImageURL, email: \"john@gmail.com\"},\n                    {name: \"Mark\", image: testImageURL, email: \"mark@gmail.com\"},\n                    {name: \"Mark\", image: testImageURL, email: \"mark@gmail.com\"},\n                    {name: \"Mark\", image: testImageURL, email: \"mark@gmail.com\"},\n                    {name: \"Mark\", image: testImageURL, email: \"mark@gmail.com\"},\n                    {name: \"Mark\", image: testImageURL, email: \"mark@gmail.com\"},\n                    {name: \"Mark\", image: testImageURL, email: \"mark@gmail.com\"},\n                    {name: \"Mark\", image: testImageURL, email: \"mark@gmail.com\"}]\n            },\n                {\n                    name: \"Planning\",\n                    overview: \"Sample meeting overview.\",\n                    time: twelve,\n                    duration: 60,\n                    category: EventType.birthday,\n                    attendees: [\n                        {name: \"John\", image: testImageURL, email: \"john@gmail.com\"},\n                        {name: \"Mark\", image: testImageURL, email: \"mark@gmail.com\"}]\n                },\n                {\n                    name: \"Design Review\",\n                    overview: \"Sample meeting overview.\",\n                    time: oneThirty,\n                    duration: 60,\n                    category: EventType.call,\n                    attendees: [\n                        {name: \"John\", image: testImageURL, email: \"john@gmail.com\"},\n                        {name: \"Mark\", image: testImageURL, email: \"mark@gmail.com\"}]\n                },\n                {\n                    name: \"Project Meeting\",\n                    overview: \"Sample meeting overview.\",\n                    time: three,\n                    duration: 46,\n                    category: EventType.catchup,\n                    attendees: [\n                        {name: \"John\", image: testImageURL, email: \"john@gmail.com\"},\n                        {name: \"Mark\", image: testImageURL, email: \"mark@gmail.com\"}]\n                }]\n        }\n        // assert(client, \"Client must be initialised to call API methods.\")\n        // const startDateTime = `${startDate.getFullYear()}-${startDate.getMonth()}-${startDate.getDay()}T${startDate.getHours()}:${startDate.getMinutes()}:${startDate.getSeconds()}`\n        // const endDateTime  = `${endDate.getFullYear()}-${endDate.getMonth()}-${endDate.getDay()}T${endDate.getHours()}:${endDate.getMinutes()}:${endDate.getSeconds()}`\n        // const meetings = await client.api(`me/calendars/${id}/calendarView?startDateTime=${startDateTime}&endDateTime=${endDateTime}&orderby=start/dateTime`).get()\n        // if (meetings.hasOwnProperty(\"value\")) {\n        //     const dateMeetingDictionary: {[key:string]: object[]} = {}\n        //     for (const meeting of meetings) {\n        //         const meetingDate = meeting.start.dateTime.split(\"T\").pop()\n        //         if (!dateMeetingDictionary[meetingDate]) {\n        //             dateMeetingDictionary[meetingDate] = []\n        //         }\n        //         dateMeetingDictionary[meetingDate].push(meeting)\n        //     }\n        //     return dateMeetingDictionary\n        // }\n        // return undefined\n    }\n\n    /*\n    * description: fetches TODAYS meetings for a calender with a certain ID or name in a sorted manner\n    * input: id OR name of calendar in string form\n    * output: array of meeting objects (first element = most recent)\n    *         undefined if fetch not successful\n    * */\n    export async function getMeetingsToday(id:string):Promise<object[]|undefined> {\n        assert(client, \"Client must be initialised to call API methods.\");\n        const today = new Date();\n        const startDateTime = `${today.getFullYear()}-${today.getMonth()}-${today.getDay()}T00:00:00`\n        const endDateTime = `${today.getFullYear()}-${today.getMonth()}-${today.getDay()}T23:59:59`\n        const meetings = await client.api(`/me/calendars/${id}/calendarView?startDateTime=${startDateTime}&endDateTime=${endDateTime}&orderby=start/dateTime`).get()\n        if (meetings.hasOwnProperty(\"value\")) {\n            return meetings\n        }\n        return undefined\n    }\n\n    /*\n    * description: creates and adds events with given input parameters\n    * input: id OR name of calendar(meeting room), name of meeting, category of meeting, start date of meeting, duration of meeting in minutes, location of meeting, description of meeting, attendees in meeting\n    * output: meeting object if successful or undefined if not successful\n    * */\n\n    export async function addMeeting(id:string, name:string, category:EventType, date:Date, duration:number, location:string, description:string, attendees:Person[]):Promise<object|undefined>{\n        assert(client, \"Client must be initialised to call API methods.\");\n        const endDate = new Date(date.getTime() + duration*60000)\n        const startDateTime = `${date.getFullYear()}-${date.getMonth()}-${date.getDay()}T${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}`\n        const endDateTime = `${endDate.getFullYear()}-${endDate.getMonth()}-${endDate.getDay()}T${endDate.getHours()}:${endDate.getMinutes()}:${endDate.getSeconds()}`\n\n        const meetingAttendees:{emailAddress: {address: string, name: string}, type: string}[] = []\n        for (const attendee of attendees) {\n            meetingAttendees.push({emailAddress: {address: attendee.email,name: attendee.name},type:\"required\"})\n        }\n\n        const event = {\n            subject: name,\n            body: {\n                contentType: \"text\",\n                content: description\n            },\n            categories: [category],\n            start: {\n                dateTime: startDateTime,\n                timeZone: \"IE\"\n            },\n            end: {\n                dateTime: endDateTime,\n                timeZone: \"IE\"\n            },\n            location: {\n                display: location\n            },\n            attendees: meetingAttendees\n        }\n\n        const response = await client.api(`/me/calendars/${id}/events`).post(event)\n        //not sure about this part, will need access to api to test\n        if (response.hasOwnProperty(\"error\")) {\n            return undefined\n        }\n        return response\n    }\n\n\n\n}","export default __webpack_public_path__ + \"static/media/Active indicator.a5368acb.svg\";","import './SidebarSplitViewController.css'\nimport React from 'react'\nimport {Col, Container, Row} from 'react-bootstrap'\nimport activeIndicator from '../images/icons/Active indicator.svg'\n\ntype SidebarSplitViewControllerState = {\n    index: number\n}\n\ntype SidebarSplitViewControllerChildren = {\n    mainView: React.ComponentElement<any, any>\n    detailView?: React.ComponentElement<any, any>\n    icon: string\n}\n\ntype SidebarSplitViewControllerProps = {\n    pages: SidebarSplitViewControllerChildren[]\n}\n\nexport default class SidebarSplitViewController extends React.Component<SidebarSplitViewControllerProps, SidebarSplitViewControllerState> {\n\n    constructor(props: SidebarSplitViewControllerProps) {\n        super(props)\n\n        this.state = {index: 0}\n    }\n\n    currentPage() {\n        return this.props.pages[this.state.index]\n    }\n\n    activityIndicatorForIndex(index: number) {\n        if (this.state.index === index) {\n            return <img className=\"toolbar-active-indicator\" src={activeIndicator} alt={\"Active\"}/>\n        } else {\n            return undefined\n        }\n    }\n\n    changeTab(index: number) {\n        this.setState({index})\n    }\n\n    sidebar() {\n        return (\n            <div className=\"toolbar\">\n                <div>\n\n                </div>\n                <div className=\"toolbar-items-section\">\n                    {\n                        this.props.pages.map((value, index) => {\n                            return (\n                                <div className={\"toolbar-item\"}>\n                                    {this.activityIndicatorForIndex(index)}\n                                    <img onClick={() => this.changeTab(index)} style={{opacity: this.state.index === index ? \"100%\" : \"40%\"}} className=\"toolbar-item-img\" src={value.icon} alt={`Toolbar item ${index}`}/>\n                                </div>\n                            )\n                        })\n                    }\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n        let detail: JSX.Element | undefined\n\n        if (this.currentPage().detailView !== undefined) {\n            detail = <Col className=\"splitview-detail-column\" xs={3}>{this.currentPage().detailView}</Col>\n        } else {\n            detail = undefined\n        }\n\n        return (\n            <Container fluid style={{height: \"100vh\"}}>\n                <Row style={{height: \"100%\"}}>\n                    {this.sidebar()}\n                    <Col style={{padding: 0, height: \"100%\", display: \"flex\", flexDirection: \"column\"}}>\n                        {this.currentPage().mainView}\n                    </Col>\n                    {detail}\n                </Row>\n            </Container>\n        )\n    }\n}","import './LoginView.css'\nimport React from 'react'\n\ntype LoginViewState = {\n    login: boolean\n    error?: Error\n    roomSelection: boolean\n}\n\ntype LoginViewProps = {\n}\n\nexport default class LoginView extends React.Component<LoginViewProps, LoginViewState> {\n\n    constructor(props: LoginViewProps) {\n        super(props)\n\n        this.loginButtonClicked = this.loginButtonClicked.bind(this)\n    }\n\n    loginButtonClicked() {\n        console.log(\"Button clicked\") // TODO: Call API\n    }\n\n    render() {\n        return (\n            <div className={\"login-background\"}>\n                <div className={\"login-popover\"}>\n                    <div style={{width: \"76%\", margin: \"0 auto\", textAlign: \"center\"}}>\n                        <h3 className={\"login-header-text\"}>Sign in to Microsoft Account</h3>\n                        <p className={\"login-information-text\"}>Connect your Microsoft account to sync, edit and add calendar data</p>\n                        <button onClick={this.loginButtonClicked} className={\"btn login-button\"}>Sign in with Outlook</button>\n                    </div>\n                    <span className={\"login-copyright-text\"}>Copyright © TCD SWENG 2021 Group 3</span>\n                </div>\n            </div>\n        )\n    }\n}\n","export default __webpack_public_path__ + \"static/media/Book.500a8c14.svg\";","export default __webpack_public_path__ + \"static/media/Camera.9f633ba0.svg\";","export default __webpack_public_path__ + \"static/media/Group.ab6a2326.svg\";","export default __webpack_public_path__ + \"static/media/Present.ed74593a.svg\";","import './MeetingsOverviewView.css'\nimport React from 'react'\nimport {API} from '../API'\nimport {Event as Meeting, EventType} from '../models/Event'\nimport Book from '../images/icons/Book.svg'\nimport Camera from '../images/icons/Camera.svg'\nimport Group from '../images/icons/Group.svg'\nimport Present from '../images/icons/Present.svg'\n\ntype MeetingsOverviewViewState = {\n    loading: boolean\n    error?: Error\n    empty: boolean\n}\n\ntype MeetingsOverviewViewProps = {\n    dateRange: {startDate: Date, endDate: Date}\n}\n\nexport default class MeetingsOverviewView extends React.Component<MeetingsOverviewViewProps, MeetingsOverviewViewState> {\n\n    // A date string key and an array of event values\n    private meetings: Record<string, Meeting[]>\n\n    constructor(props: MeetingsOverviewViewProps) {\n        super(props)\n\n        this.meetings = {}\n        this.state = {loading: false, error: undefined, empty: true}\n    }\n\n    async componentDidMount() {\n        this.setState({loading: true})\n\n        // Call API\n\n        const result = await API.getMeetings(\"\", this.props.dateRange.startDate, this.props.dateRange.endDate)\n\n        if (result === undefined) {\n            // handle error\n            return\n        }\n\n        this.meetings = result as Record<string, Meeting[]>\n        this.setState({loading: false, empty: Object.keys(this.meetings).length === 0, error: undefined})\n    }\n\n    errorView(error: Error) {\n        return this.emptyView(error.name, error.message)\n    }\n\n    emptyView(title = \"Looks like there's no meetings\", message = \"Have a day off!\") {\n        return (\n            <div style={{height: \"100%\"}}>\n                <div className={\"meetings-overview-empty-view\"}>\n                    <h4 className={\"meetings-overview-empty-view-header\"}>{title}</h4>\n                    <span className={\"meetings-overview-empty-view-message\"}>{message}</span>\n                </div>\n            </div>\n        )\n    }\n\n    loadingView() {\n        return (\n            <div className={\"meetings-overview-loading-view\"}>\n                <div className={\"meetings-overview-loading-view-spinner\"}>\n                </div>\n            </div>\n        )\n    }\n\n    static meetingStringFromMeeting(meeting: Meeting) {\n        const start = meeting.time\n        const minutesInMilliseconds = 60000\n        const end = new Date(start.getTime() + meeting.duration*minutesInMilliseconds)\n        const options: Intl.DateTimeFormatOptions = {hour12: false, hour: \"2-digit\", minute: \"2-digit\"}\n\n        return `${start.toLocaleTimeString(\"default\", options)} - ${end.toLocaleTimeString(\"default\", options)}`\n    }\n\n    imageForMeetingCategory(category: EventType) {\n        switch (category) {\n            case EventType.conference:\n                return Group\n            case EventType.birthday:\n                return Present\n            case EventType.call:\n                return Camera\n            case EventType.catchup:\n                return Book\n        }\n    }\n\n    cssFilterForMeetingCategory(category: EventType) {\n        // colours generated from https://codepen.io/sosuke/pen/Pjoqqp using code from https://stackoverflow.com/a/43960991/604861\n        // we could alternatively just put the function here but the code would have to be torn apart to return exactly what we want\n        switch (category) {\n            case EventType.conference:\n                return \"invert(62%) sepia(8%) saturate(7333%) hue-rotate(215deg) brightness(104%) contrast(101%)\"\n            case EventType.birthday:\n                return \"invert(49%) sepia(78%) saturate(2895%) hue-rotate(338deg) brightness(106%) contrast(101%)\"\n            case EventType.call:\n                return \"invert(61%) sepia(84%) saturate(6031%) hue-rotate(184deg) brightness(93%) contrast(102%)\"\n            case EventType.catchup:\n                return \"invert(47%) sepia(86%) saturate(2495%) hue-rotate(145deg) brightness(93%) contrast(101%)\"\n        }\n    }\n\n    listView() {\n        return (\n            <ul className={\"meetings-overview-meetings\"}>\n                {Object.entries(this.meetings).map(([dateString, meetings]) =>\n                    (\n                        <React.Fragment>\n                            <h6 className={\"meetings-overview-header-text\"}>{new Date(dateString).toLocaleDateString(\"default\", {weekday: \"long\", month: \"long\", day: \"numeric\"})}</h6>\n                            {meetings.map((meeting, index) =>\n                                (\n                                    <li>\n                                        <div className={\"meetings-overview-meeting-color-tab\"}\n                                             style={{backgroundColor: meeting.category}}/>\n                                        <div className={\"meetings-overview-meeting-text\"}>\n                                            <h6>{meeting.name}</h6>\n                                            <span>{MeetingsOverviewView.meetingStringFromMeeting(meeting)}</span>\n                                            <div className={\"meetings-overview-meeting-icon\"}\n                                                 style={{backgroundColor: `${meeting.category}59`}}> {/* 59 is alpha 0.35*/}\n                                                <img src={this.imageForMeetingCategory(meeting.category)}\n                                                     style={{filter: this.cssFilterForMeetingCategory(meeting.category)}}\n                                                     alt={\"\"}/>\n                                            </div>\n                                        </div>\n                                        <ul className={\"meetings-overview-meeting-attendees\"}>\n                                            {meeting.attendees.flatMap((person, index) => {\n                                                if (person.image === undefined || index > 5) { // only have a max of 6 images\n                                                    return []\n                                                }\n                                                return [(\n                                                    <li>\n                                                        <img src={person.image.toString()}\n                                                             alt={`${person.name}'s avatar`}/>\n                                                    </li>\n                                                )]\n                                            })}\n                                        </ul>\n                                    </li>\n                                ))}\n                        </React.Fragment>\n                    ))}\n            </ul>\n        )\n    }\n\n    render() {\n        let body: JSX.Element\n\n        if (this.state.loading) {\n            body = this.loadingView()\n        } else if (this.state.empty) {\n            body = this.emptyView()\n        } else if (this.state.error != null) {\n            body = this.errorView(this.state.error)\n        } else {\n            body = this.listView()\n        }\n\n        return (\n            <div className={\"meetings-overview-scroll-container scroll-container-hidden-bars\"}>\n                <h5 className={\"meetings-overview-heading\"}>Meetings</h5>\n                {body}\n            </div>\n        )\n    }\n}","export default __webpack_public_path__ + \"static/media/Right Chevron.4e4a1046.svg\";","import './CalendarView.css'\nimport React from 'react'\nimport RightChevron from '../images/icons/Right Chevron.svg'\nimport {Col, Container, Row} from 'react-bootstrap'\nimport {Event as Meeting} from '../models/Event'\nimport {API} from '../API'\nimport MeetingsOverviewView from \"./MeetingsOverviewView\"\n\ntype CalendarViewState = {\n    loading: boolean\n    currentWeek: Date\n    now: Date\n    meetings: Record<string, Meeting[]>\n}\n\ntype CalendarViewProps = {\n}\n\nexport default class CalendarView extends React.Component<CalendarViewProps, CalendarViewState> {\n\n    private readonly DAYS_IN_A_WEEK = 7\n    private readonly HOURS_IN_A_DAY = 24\n\n    private readonly CELL_HEIGHT = 80\n\n    constructor(props: CalendarViewProps) {\n        super(props)\n\n        this.state = {loading: false, currentWeek: new Date(), now: new Date(), meetings: {}}\n        this.nextWeek = this.nextWeek.bind(this)\n        this.previousWeek = this.previousWeek.bind(this)\n\n        const minuteInMilliseconds = 60 * 1000\n        setInterval(() => this.setState({now: new Date()}), minuteInMilliseconds)\n    }\n\n    async componentDidMount() {\n        await this.loadFromAPI() // trigger initial load\n    }\n\n    async componentDidUpdate(prevProps: Readonly<CalendarViewProps>, prevState: Readonly<CalendarViewState>, snapshot?: any) {\n        if (prevState.loading !== this.state.loading) {\n            return // stop recursive calling\n        }\n\n        // this will be called when week is changed and when now is updated (every minute)\n        await this.loadFromAPI()\n    }\n\n    async loadFromAPI() {\n        this.setState({loading: true})\n\n        const firstDay = this.firstDayOfWeek(this.state.currentWeek)\n        const lastDay = new Date(firstDay)\n        lastDay.setDate(firstDay.getDate() + this.DAYS_IN_A_WEEK - 1)\n        const result = await API.getMeetings(\"\", firstDay, lastDay)\n\n        if (result === undefined) {\n            // handle error\n            return\n        }\n\n        const meetings = result as Record<string, Meeting[]>\n\n        this.setState({meetings, loading: false})\n    }\n\n    firstDayOfWeek(date: Date) {\n        const startOfWeek = date.getDate() - date.getDay() // First day is the day of the month - the day of the week\n        const firstDay = new Date(date)\n        firstDay.setDate(startOfWeek)\n        return firstDay\n    }\n\n    weekString(date: Date) {\n        const firstDay = this.firstDayOfWeek(date)\n        const lastDay = new Date(firstDay)\n        lastDay.setDate(firstDay.getDate() + this.DAYS_IN_A_WEEK - 1)\n        const month = lastDay.toLocaleString('default', { month: 'long' }) // use the month of the last date in case we have changed month\n\n        return `${firstDay.getDate()} - ${lastDay.getDate()} ${month}`\n    }\n\n    previousWeek() {\n        const currentWeek = this.state.currentWeek\n        const lastWeek = new Date(currentWeek)\n        lastWeek.setDate(currentWeek.getDate() - this.DAYS_IN_A_WEEK)\n        this.setState({currentWeek: lastWeek})\n    }\n\n    nextWeek() {\n        const currentWeek = this.state.currentWeek\n        const nextWeek = new Date(currentWeek)\n        nextWeek.setDate(currentWeek.getDate() + this.DAYS_IN_A_WEEK)\n        this.setState({currentWeek: nextWeek})\n    }\n\n    datesAreSameDay(lhs: Date, rhs: Date) {\n        return lhs.getDate() === rhs.getDate() &&\n               lhs.getFullYear() === rhs.getFullYear() &&\n               lhs.getMonth() === rhs.getMonth()\n    }\n\n    meetingDurationToHeight(duration: number) {\n        const heightPerMinute = this.CELL_HEIGHT/60 // 60 minutes in an hour\n        return duration * heightPerMinute\n    }\n\n    meetingTimeToYOffset(time: Date) {\n        return ((this.CELL_HEIGHT/60) * time.getMinutes()) + this.CELL_HEIGHT * time.getHours()\n    }\n\n    currentTimeIndicator() {\n        const offset = this.meetingTimeToYOffset(this.state.now)\n        return (\n            <React.Fragment>\n                <div className={\"calendar-view-calendar-time-now-ball\"} style={{top: offset}}/>\n                <div className={\"calendar-view-calendar-time-now-bar\"} style={{top: offset}}/>\n            </React.Fragment>\n        )\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <div style={{marginTop: \"30px\", paddingLeft: \"25px\", borderBottom: \"1px solid lightgray\"}}>\n                    <div className={\"calendar-view-stepper-control\"}>\n                        <button onClick={this.previousWeek} type={\"button\"} className={\"btn btn-light\"}>\n                            <img className={\"calendar-view-stepper-control-left-image\"} src={RightChevron} alt={\"Go back a week\"}/>\n                        </button>\n                        <div className={\"calendar-view-stepper-control-separator\"}/>\n                        <button onClick={this.nextWeek} type={\"button\"} className={\"btn btn-light\"}>\n                            <img src={RightChevron} alt={\"Go forward a week\"}/>\n                        </button>\n                    </div>\n                    <h5 className={\"calendar-view-current-week\"}>{this.weekString(this.state.currentWeek)}</h5>\n                </div>\n                <Container className={\"calendar-view\"}>\n                    <Row className={\"calendar-view-header\"}>\n                        {\n                            [...Array(this.DAYS_IN_A_WEEK)].map((value, index) => {\n                                const firstDay = this.firstDayOfWeek(this.state.currentWeek)\n                                const day = new Date(firstDay)\n                                day.setDate(firstDay.getDate() + index)\n                                const dayName = day.toLocaleString('default', { weekday: 'short' })\n                                const isCurrentDay = this.datesAreSameDay(day, this.state.now)\n\n                                return (\n                                    <Col className={`calendar-view-header-weekday ${isCurrentDay ? \"calendar-view-header-current-weekday\" : \"\" }`}>\n                                        <h6>{dayName}</h6>\n                                        <h5>{day.getDate()}</h5>\n                                    </Col>\n                                )\n                            })\n                        }\n                    </Row>\n                    <Row className={\"calendar-view-calendar scroll-container-hidden-bars\"}>\n                        <div className={\"calendar-view-calendar-times\"}>\n                            {\n                                [...Array(this.HOURS_IN_A_DAY)].map((value, index) => {\n                                    const time = new Date(this.state.now)\n                                    time.setHours(index)\n                                    return (\n                                        <div className={\"calendar-view-calendar-time\"} style={{height: this.CELL_HEIGHT}}>\n                                            <span>{time.toLocaleTimeString(\"default\", {hour12: true, hour: \"numeric\"})}</span>\n                                        </div>\n                                    )\n                                })\n                            }\n                        </div>\n                        <Row noGutters={true} style={{flex: 1, marginLeft: \"-10px\"}}>\n                            <div className={\"calendar-view-horizontal-separators\"}>\n                                {\n                                    [...Array(this.HOURS_IN_A_DAY)].map((value, index) => <div\n                                        className={\"calendar-view-horizontal-separator\"} style={{height: this.CELL_HEIGHT}}/>)\n                                }\n                            </div>\n                            {\n                                [...Array(this.DAYS_IN_A_WEEK)].map((value, column) => {\n                                    const firstDay = this.firstDayOfWeek(this.state.currentWeek)\n                                    const currentDay = new Date(firstDay)\n                                    currentDay.setDate(firstDay.getDate() + column)\n                                    return (\n                                        <Col className={\"calendar-view-calendar-days\"}>\n                                            {\n                                                [...Array(this.HOURS_IN_A_DAY)].map((value, row) => <div\n                                                    style={{height: this.CELL_HEIGHT}}/>)\n                                            }\n                                            {\n                                                Object.entries(this.state.meetings).filter((value) => {\n                                                    const dateString = value[0]\n                                                    const day = new Date(dateString)\n                                                    return this.datesAreSameDay(day, currentDay)\n                                                })[0]?.flatMap((value) => (typeof value === \"string\") ? [] : (value as Meeting[])).map((meeting) => (\n                                                    <div className={\"calendar-view-calendar-meeting\"} style={\n                                                        {\n                                                            backgroundColor: `${meeting.category}CC`, // CC is the HEX code for 80% transparency\n                                                            top: this.meetingTimeToYOffset(meeting.time),\n                                                            height: this.meetingDurationToHeight(meeting.duration)\n                                                        }\n                                                    }>\n                                                        <p className={\"calendar-view-calendar-meeting-name\"}>{meeting.name}</p>\n                                                        <p className={\"calendar-view-calendar-meeting-time\"}>{MeetingsOverviewView.meetingStringFromMeeting(meeting)}</p>\n                                                    </div>\n                                                ))\n                                            }\n                                            {\n                                                this.datesAreSameDay(this.state.now, currentDay) ? this.currentTimeIndicator() : undefined\n                                            }\n                                        </Col>\n                                    )})\n                            }\n                        </Row>\n                    </Row>\n                </Container>\n            </React.Fragment>\n        )\n    }\n}","import './SettingsView.css';\nimport React from 'react';\n\ntype SettingsViewState = {\n\n}\n\ntype SettingsViewProps = {\n}\n\nexport default class SettingsView extends React.Component<SettingsViewProps, SettingsViewState> {\n\n    render() {\n        return <div>Settings view</div>;\n    }\n}","export default __webpack_public_path__ + \"static/media/Calendar.bb613596.svg\";","export default __webpack_public_path__ + \"static/media/Settings.2cbb9c21.svg\";","import React from 'react';\nimport SidebarSplitViewController from './views/SidebarSplitViewController'\nimport LoginView from './views/LoginView'\nimport MeetingsOverviewView from './views/MeetingsOverviewView'\nimport CalendarView from './views/CalendarView'\nimport SettingsView from './views/SettingsView'\nimport calendar from './images/icons/Calendar.svg'\nimport settings from './images/icons/Settings.svg'\nimport { Fab } from '@material-ui/core'\nimport { Add } from '@material-ui/icons'\n\n// export const APP_COLOR = \"#6a53e4\";\n\nfunction App() {\n  if (isSignedIn()) {\n    const mainView = <CalendarView/>\n    const detailView = <MeetingsOverviewView dateRange={{startDate: new Date(), endDate: new Date()}}/>\n    const mainPage = {mainView, detailView, icon:calendar}\n    const settingsView = <SettingsView />\n    const settingsPage = {mainView: settingsView, icon:settings}\n    return (\n        <React.Fragment>\n          <SidebarSplitViewController pages={[mainPage, settingsPage]}/>\n          <Fab color=\"primary\" aria-label=\"add\">\n            <Add />\n          </Fab>\n        </React.Fragment>\n    )\n  } else {\n    return <LoginView />;\n  }\n}\n\nfunction isSignedIn() {\n  return true; // TODO: Implement this to read from browser storage\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './index.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}